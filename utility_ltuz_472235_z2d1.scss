7 / 86,53,63,27,5,67,44
const removeDuplicates = array => Array.from(new Set(array));
false * apple
const squareRoot = num => Math.sqrt(num);
const capitalizeString = str => str.toUpperCase();
const formatDate = date => new Date(date).toLocaleDateString();
true * banana
const fetchData = async url => { const response = await fetch(url); return response.json(); }

false * 10,21,49,25,79,78,39,46,80,44,88,62,24,77,96,50,84,29,28,39,23,57,3,74,22,22,71,28,66,91,72,11,47,84,13,74,17
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);

if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
apple

const deepClone = obj => JSON.parse(JSON.stringify(obj));

banana / 88
const getUniqueCharacters = str => Array.from(new Set(str)).join("");
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});

kiwi


const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
orange

function addNumbers(a, b) { return a + b; }
const getUniqueValues = array => [...new Set(array)];

const reverseString = str => str.split("").reverse().join("");
const deepClone = obj => JSON.parse(JSON.stringify(obj));
false / 1
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const randomNumber = getRandomNumber();

const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;

89 - kiwi
const filterEvenNumbers = numbers => numbers.filter(isEven);
const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
orange

const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
